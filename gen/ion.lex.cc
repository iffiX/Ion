#line 2 "/home/Administrator/iffi/Projects/Ion/gen/ion.lex.cc"

#line 4 "/home/Administrator/iffi/Projects/Ion/gen/ion.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* Feature test macros. Flex uses functions that require a minimum set of
 * macros defined. As defining some macros may hide function declarations that
 * user code might use, be conservative and respect user's definitions as much
 * as possible. In glibc, feature test macros may not be all set up until one
 * of the libc header (that includes <features.h>) is included. This creates
 * a circular dependency when we check the macros. <assert.h> is the safest
 * header we can include and does not declare too many functions we don't need.
 */
#if !defined(__GNU_LIBRARY__) && defined(__STDC__)
#include <assert.h>
#endif
#if !(defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE) || \
    defined(_POSIX_SOURCE))
# define _POSIX_C_SOURCE 1 /* Required for fileno() */
# define _POSIX_SOURCE 1
#endif
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef YYFLEX_INTTYPES_DEFINED
#define YYFLEX_INTTYPES_DEFINED

/* Prefer C99 integer types if available. */
# if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* Include <inttypes.h> and not <stdint.h> because Solaris 2.6 has the former
 * and not the latter.
 */
#include <inttypes.h>
#  define YYFLEX_USE_STDINT
# else
#  if defined(_MSC_VER) && _MSC_VER >= 1600
/* Visual C++ 2010 does not define __STDC_VERSION__ and has <stdint.h> but not
 * <inttypes.h>.
 */
#include <stdint.h>
#   define YYFLEX_USE_STDINT
#  endif
# endif
# ifdef YYFLEX_USE_STDINT
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
# else
typedef unsigned char flex_uint8_t;
typedef short int flex_int16_t;
typedef unsigned short int flex_uint16_t;
#  ifdef __STDC__
typedef signed char flex_int8_t;
/* ISO C only requires at least 16 bits for int. */
#include <limits.h>
#   if UINT_MAX >= 4294967295
#    define YYFLEX_INT32_DEFINED
typedef int flex_int32_t;
typedef unsigned int flex_uint32_t;
#   endif
#  else
typedef char flex_int8_t;
#  endif
#  ifndef YYFLEX_INT32_DEFINED
typedef long int flex_int32_t;
typedef unsigned long int flex_uint32_t;
#  endif
# endif
#endif /* YYFLEX_INTTYPES_DEFINED */

/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 112
#define YY_END_OF_BUFFER 113
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[482] =
    {   0,
        0,    1,    5,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    3,    3,    0,    2,  113,  110,
       62,  109,  110,    7,    4,   94,   97,    7,   64,   65,
       91,   88,   70,   89,   72,   93,   60,   56,   71,   73,
      103,   74,  105,   63,   63,   63,   63,   63,   63,   63,
       66,  110,   67,   99,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   68,
       98,   69,  100,    1,    5,    5,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   14,   13,    9,  112,   15,   15,   15,   23,
       20,   21,  112,   24,   24,  111,  112,    3,    2,   62,
      107,    0,    0,   81,   82,    0,   90,   78,   76,   77,
       75,   60,   92,   79,   60,   60,    0,    0,   61,    0,
        0,    0,   56,    0,   95,  102,  101,  106,  104,   96,
       63,   16,   63,    7,    7,   63,   63,   63,   63,    0,
      108,   84,   63,   29,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   43,   63,   45,   46,   63,   63,

       49,   63,   63,   63,   63,   63,   63,   83,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       11,   12,    0,    0,   18,   19,    0,    3,    2,    8,
       17,   87,   60,    0,   80,   60,   60,    0,   57,    0,
        0,   60,   58,    0,   59,    0,   60,   56,    0,   56,

       85,   86,    0,    0,   63,   63,   63,   28,   63,   63,
       63,   63,   34,   35,   63,   63,   63,   63,   40,   63,
       63,   63,   63,   48,   63,   63,   63,   53,   63,   63,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   10,   22,   60,
        0,   60,   60,    0,   56,    8,   63,   27,   26,   63,
       63,   63,   63,   36,   37,   63,   63,   41,   63,   63,

       63,   50,   63,   63,   63,   55,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   25,   63,   31,   32,   63,   63,   63,   63,
       63,   63,   51,   63,   54,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   30,   63,
       38,   63,   42,   44,   47,   52,    5,    5,    5,    5,
        5,    5,    5,    5,   63,   39,    5,    5,   33,    5,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,    1,    1,   28,   29,   28,   28,   30,   31,
       32,   32,   32,   33,   32,   32,   32,   34,   35,   32,
       32,   36,   32,   37,   38,   32,   32,   39,   32,   32,
       40,   41,   42,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   33,   54,   55,   56,   57,
       58,   59,   32,   60,   61,   62,   63,   32,   64,   65,
       66,   32,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[494] =
    {   0,
        0, 1035,   70,    0,  138,  139,  137,  140,  148,  149,
      147,  150, 1035, 1034, 1032, 1031,    0, 1030, 1033, 1040,
      159, 1040, 1006,  156, 1040, 1005, 1004,  158, 1040, 1040,
      156, 1003, 1040,  144,  153,  158,  175,  206, 1040, 1040,
      160, 1002,  172,    0,  196,  197,  969,  212,  966,  203,
     1040, 1022, 1040,  998,  154,  210,  176,  974,  112,  238,
      967,  203,  976,  962,  959,  973,  255,  957,  148, 1040,
      990, 1040, 1040,  233,    0,  243, 1040,  989,  988,  987,
        0,    0,  204,  986,    0,  225,  247,  245,  289,  320,
        0,    0,  250,  985,  246,  369,  965,  951,  948,    0,

     1004,    0,  980,  221,  945,  225,  955,  128,  232,  948,
      238,  957,  943,  940,  954,  244,  938,  250,    0,  971,
        0,    0, 1040, 1040, 1040,  993, 1040,  989,  984, 1040,
     1040, 1040,  990, 1040,  306, 1040, 1040,  988,  987,  277,
     1040,  307,  315, 1040, 1040,  317,  964, 1040, 1040, 1040,
     1040,  421,  963, 1040,  425,  442,  311,  346, 1040,  429,
      944,  324,  459,  337,  961, 1040, 1040, 1040, 1040,  960,
        0,  326,  342,  979,  974,  928,  446,  925,  918,  977,
     1040, 1040,  931,  917,  447,  918,  877,  199,  254,  886,
      875,  871,  461,  871,    0,  869,    0,    0,  871,  864,

        0,  864,  871,  861,  856,  868,  858, 1040,  347,    0,
      359,    0,    0,    0,  892,    0,    0,    0,    0,  479,
      891,    0,  485,  505,  449,  523,    0,  511,  537,  463,
      531,  550,  889,    0,    0,    0,    0,  888,    0,  858,
      854,  847,  906,    0,  856,  839,  850,  853,  839,  279,
      434,  848,  828,  822,  823,  822,    0,  819,    0,    0,
      821,  814,    0,  810,  814,  804,  797,  809,  790,    0,
     1040, 1040,  845,  839, 1040, 1040,  484,  842,  841, 1040,
     1040, 1040,  569,  557, 1040,  573,  590,  605,  497,  491,
      609,  616,  577,  595,  800,  794,  623,  644,  649,  659,

     1040, 1040,  829,  824,  772,  782,  781,    0,  779,  782,
      765,  753,    0,    0,  764,  764,  751,  754,    0,  741,
      750,  736,  747,    0,  730,  725,  715,    0,  722,  724,
        0,  665,  680,    0,  685,  700,  691,  613,  494,  704,
      717,  631,  627,    0,  726,  706,  736,  753,  762,    0,
        0,  707,  718,  716,    0,  714,  717,  699,  697,    0,
        0,  704,  702,  699,  702,    0,  690,  697,  684,  694,
        0,  671,  670,  665,    0,  672,  664, 1040, 1040,  768,
      783,  799,  803,  788,  820, 1040,  648,    0,    0,  636,
      640,  630,  637,    0,    0,  624,  627,    0,  628,  602,

      611,    0,  609,  595,  605,    0,  835,  839,  853,  868,
      872,  886,  592,    0,    0,  559,  554,  544,  551,    0,
        0,  542,  545,    0,  529,  513,  515,    0,  513,  500,
      498,    0,    0,  484,    0,    0,  483,  474,  478,  474,
      459,  475,    0,  445,    0,    0,  435,    0,    0,  431,
      415,  411,  405,  310,  281,    0,  263,    0,    0,  251,
        0,  231,    0,    0,    0,    0,    0,  224,    0,  172,
        0,    0,    0,    0,  180,    0,  163,    0,    0,    0,
     1040,  935,  939,  943,  947,  951,  953,  957,  961,  965,
      969,  973,  162

    } ;

static const flex_int16_t yy_def[494] =
    {   0,
      481,    1,  481,    3,  482,  482,  483,  483,  484,  484,
      485,  485,    1,    1,  486,  486,  486,  486,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  487,  487,  487,  487,  487,  487,  487,
      481,  488,  481,  481,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  481,
      481,  481,  481,  481,  489,  489,  481,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  481,   96,   96,   96,  489,

      490,  489,  489,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  489,  489,
      489,  489,  481,  481,  481,  491,  481,  481,  481,  481,
      481,  481,  492,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      493,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      487,  481,  487,  481,  481,  487,  487,  487,  487,  488,
      481,  481,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  481,  481,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,   96,   96,
       96,   96,  490,  489,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  489,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  493,  493,  481,  481,  481,  481,

      481,  481,  481,  481,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  229,  229,   89,  489,  489,  489,  489,
      489,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  489,  489,  489,  489,
      489,  489,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  487,  487,
      487,  487,  487,  487,  487,  487,   96,   96,   96,   96,
       96,   96,   96,   96,  487,  487,   96,   96,  487,   96,
        0,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481

    } ;

static const flex_int16_t yy_nxt[1111] =
    {   0,
       20,   21,   22,   21,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       38,   38,   39,   40,   41,   42,   43,   44,   45,   44,
       46,   44,   44,   47,   44,   48,   49,   50,   44,   51,
       52,   53,   54,   44,   55,   56,   57,   58,   59,   60,
       61,   44,   62,   44,   63,   44,   64,   65,   66,   67,
       44,   68,   50,   69,   44,   44,   70,   71,   72,   73,
       75,   76,   77,   76,   78,   75,   75,   79,   80,   75,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
       90,   90,   91,   92,   93,   94,   95,   96,   96,   96,

       97,   96,   96,   98,   96,   96,   99,   96,   96,  100,
      101,  102,  103,   96,  104,  105,  106,  107,  108,  109,
      110,   96,  111,   96,  112,   96,  113,  114,  115,  116,
       96,  117,   96,  118,   96,   96,  119,  120,  121,  122,
      124,  124,  128,  125,  125,  128,  129,  125,  125,  129,
      131,  131,  135,  132,  132,  135,  135,  132,  132,  135,
      140,  142,  140,  143,  295,  143,  189,  146,  147,  150,
      151,  152,  152,  152,  152,  153,  190,  126,  126,  126,
      126,  148,  251,  154,  165,  166,  167,  133,  133,  133,
      133,  155,  252,  156,  156,  156,  156,  169,  170,  206,

      207,  172,  174,  157,  158,  172,  175,  159,  174,  160,
      183,  480,  175,  161,  184,  172,  215,  174,  162,  172,
      157,  175,  155,  158,  163,  163,  163,  163,  479,  216,
      186,  173,  160,  187,  140,  158,  209,  478,  159,  161,
      173,  176,  177,  174,  211,  173,  211,  175,  313,  164,
      218,  219,  195,  314,  158,  173,  177,  173,  196,  197,
      174,  177,  221,  198,  175,  220,  220,  220,  220,  185,
      222,  237,  238,  177,  233,  234,  235,  245,  140,  248,
      140,  246,  249,  173,  253,  177,  477,  257,  265,  254,
      191,  255,  266,  258,  259,  192,  476,  193,  260,  203,

      173,  268,  269,  204,  177,  223,  315,  224,  224,  224,
      224,  277,  280,  475,  316,  277,  281,  225,  226,  474,
      281,  227,  281,  228,  281,  473,  280,  229,  360,  289,
      289,  143,  230,  361,  225,  143,  223,  226,  231,  231,
      231,  231,  297,  297,  297,  297,  228,  172,  140,  226,
      209,  172,  227,  229,  290,  300,  300,  300,  300,  291,
      211,  291,  211,  232,  292,  292,  292,  292,  226,  210,
      210,  472,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  239,  239,  239,
      239,  210,  210,  210,  210,  210,  239,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  210,  210,
      210,  210,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  210,  210,  210,  210,  283,
      283,  283,  283,  286,  286,  286,  286,  293,  293,  293,
      158,  174,  172,  159,  158,  175,  172,  159,  155,  471,
      287,  287,  287,  287,  284,  470,  174,  338,  338,  158,
      175,  158,  294,  158,  159,  155,  469,  298,  298,  298,
      298,  346,  346,  346,  346,  288,  362,  468,  158,  379,
      158,  159,  339,  379,  363,  310,  467,  332,  332,  332,

      332,  466,  299,  335,  335,  335,  335,  158,  226,  289,
      289,  227,  338,  338,  226,  289,  289,  227,  320,  465,
      464,  223,  333,  336,  336,  336,  336,  226,  463,  342,
      342,  342,  462,  226,  226,  461,  340,  227,  340,  460,
      290,  341,  341,  341,  341,  459,  458,  223,  337,  347,
      347,  347,  347,  226,  343,  344,  344,  344,  344,  457,
      226,  456,  455,  227,  344,  344,  344,  344,  349,  349,
      349,  349,  454,  453,  348,  283,  283,  283,  283,  226,
      345,  344,  344,  344,  344,  344,  344,  283,  283,  283,
      283,  380,  380,  380,  380,  293,  293,  293,  158,  452,

      451,  159,  158,  450,  449,  159,  155,  448,  287,  287,
      287,  287,  284,  293,  293,  293,  381,  158,  447,  158,
      294,  158,  159,  382,  382,  382,  382,  292,  292,  292,
      292,  338,  338,  288,  383,  383,  383,  383,  158,  155,
      446,  156,  156,  156,  156,  342,  342,  342,  159,  342,
      342,  342,  158,  445,  444,  159,  339,  443,  442,  384,
      155,  441,  298,  298,  298,  298,  162,  385,  385,  385,
      385,  158,  440,  158,  343,  155,  159,  163,  163,  163,
      163,  439,  438,  332,  332,  332,  332,  299,  158,  437,
      436,  159,  158,  435,  226,  434,  433,  227,  332,  332,

      332,  332,  164,  407,  407,  407,  407,  158,  333,  409,
      409,  409,  409,  226,  226,  432,  223,  227,  336,  336,
      336,  336,  341,  341,  341,  341,  431,  430,  408,  226,
      429,  428,  227,  226,  210,  410,  410,  410,  410,  427,
      210,  426,  425,  337,  210,  424,  423,  422,  226,  227,
      421,  210,  223,  420,  347,  347,  347,  347,  419,  418,
      411,  417,  416,  210,  415,  226,  414,  413,  227,  210,
      210,  412,  412,  412,  412,  406,  405,  404,  223,  348,
      231,  231,  231,  231,  226,  403,  380,  380,  380,  380,
      402,  226,  401,  400,  227,  399,  398,  158,  397,  396,

      159,  380,  380,  380,  380,  232,  383,  383,  383,  383,
      226,  381,  395,  394,  393,  155,  158,  287,  287,  287,
      287,  383,  383,  383,  383,  392,  391,  390,  158,  389,
      388,  159,  387,  386,  386,  159,  155,  481,  298,  298,
      298,  298,  288,  296,  279,  278,  384,  158,  378,  158,
      378,  377,  159,  407,  407,  407,  407,  407,  407,  407,
      407,  376,  375,  299,  226,  374,  373,  227,  158,  223,
      372,  336,  336,  336,  336,  371,  370,  369,  408,  368,
      367,  366,  226,  226,  365,  227,  410,  410,  410,  410,
      410,  410,  410,  410,  364,  359,  337,  358,  357,  356,

      227,  226,  223,  355,  347,  347,  347,  347,  181,  354,
      353,  411,  352,  351,  350,  226,  334,  331,  227,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  348,
      319,  318,  317,  312,  226,  123,  123,  123,  123,  127,
      127,  127,  127,  130,  130,  130,  130,  134,  134,  134,
      134,  137,  137,  137,  137,  171,  171,  180,  180,  180,
      180,  210,  311,  210,  210,  243,  243,  243,  243,  271,
      271,  271,  271,  275,  275,  275,  275,  309,  308,  181,
      307,  306,  305,  304,  303,  302,  301,  296,  285,  282,
      279,  278,  276,  274,  273,  272,  270,  267,  264,  263,

      262,  261,  256,  250,  247,  244,  181,  242,  241,  240,
      236,  217,  214,  213,  212,  208,  205,  202,  201,  200,
      199,  194,  188,  182,  181,  179,  178,  168,  149,  145,
      144,  141,  481,  139,  138,  138,  136,  136,   74,   19,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481
    } ;

static const flex_int16_t yy_chk[1111] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    6,    7,    5,    6,    8,    7,    5,    6,    8,
        9,   10,   11,    9,   10,   12,   11,    9,   10,   12,
       21,   24,   21,   28,  493,   24,   59,   28,   31,   34,
       34,   35,   35,   35,   35,   36,   59,    7,    5,    6,
        8,   31,  108,   36,   41,   41,   41,   11,    9,   10,
       12,   37,  108,   37,   37,   37,   37,   43,   43,   69,

       69,   45,   46,   37,   37,   45,   46,   37,   50,   37,
       55,  477,   50,   37,   55,   56,   83,   48,   37,   56,
       37,   48,   38,   37,   38,   38,   38,   38,  475,   83,
       57,   45,   37,   57,   74,   38,   74,  470,   38,   37,
       48,   46,   48,   60,   76,   56,   76,   60,  188,   38,
       86,   86,   62,  188,   38,   45,   46,   48,   62,   62,
       67,   48,   88,   62,   67,   87,   87,   87,   87,   56,
       88,   95,   95,   60,   93,   93,   93,  104,  140,  106,
      140,  104,  106,   67,  109,   67,  468,  111,  116,  109,
       60,  109,  116,  111,  111,   60,  462,   60,  111,   67,

       67,  118,  118,   67,   67,   89,  189,   89,   89,   89,
       89,  135,  142,  460,  189,  135,  142,   89,   89,  457,
      143,   89,  146,   89,  143,  455,  146,   89,  250,  157,
      157,  172,   89,  250,   89,  172,   90,   89,   90,   90,
       90,   90,  162,  162,  162,  162,   89,  173,  209,   90,
      209,  173,   90,   89,  157,  164,  164,  164,  164,  158,
      211,  158,  211,   90,  158,  158,  158,  158,   90,   96,
       96,  454,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  152,
      152,  152,  152,  155,  155,  155,  155,  160,  160,  160,
      152,  177,  185,  152,  155,  177,  185,  155,  156,  453,
      156,  156,  156,  156,  152,  452,  193,  225,  225,  152,
      193,  156,  160,  155,  156,  163,  451,  163,  163,  163,
      163,  230,  230,  230,  230,  156,  251,  450,  163,  277,
      156,  163,  225,  277,  251,  185,  447,  220,  220,  220,

      220,  444,  163,  223,  223,  223,  223,  163,  220,  290,
      290,  220,  339,  339,  223,  289,  289,  223,  193,  442,
      441,  224,  220,  224,  224,  224,  224,  220,  440,  228,
      228,  228,  439,  223,  224,  438,  226,  224,  226,  437,
      289,  226,  226,  226,  226,  434,  431,  231,  224,  231,
      231,  231,  231,  224,  228,  229,  229,  229,  229,  430,
      231,  429,  427,  231,  229,  229,  229,  229,  232,  232,
      232,  232,  426,  425,  231,  284,  284,  284,  284,  231,
      229,  229,  229,  229,  229,  229,  229,  283,  283,  283,
      283,  286,  286,  286,  286,  293,  293,  293,  283,  423,

      422,  283,  286,  419,  418,  286,  287,  417,  287,  287,
      287,  287,  283,  294,  294,  294,  286,  283,  416,  287,
      293,  286,  287,  288,  288,  288,  288,  291,  291,  291,
      291,  338,  338,  287,  292,  292,  292,  292,  287,  297,
      413,  297,  297,  297,  297,  343,  343,  343,  292,  342,
      342,  342,  297,  405,  404,  297,  338,  403,  401,  292,
      298,  400,  298,  298,  298,  298,  297,  299,  299,  299,
      299,  297,  399,  298,  342,  300,  298,  300,  300,  300,
      300,  397,  396,  332,  332,  332,  332,  298,  300,  393,
      392,  300,  298,  391,  332,  390,  387,  332,  333,  333,

      333,  333,  300,  335,  335,  335,  335,  300,  332,  337,
      337,  337,  337,  332,  335,  377,  336,  335,  336,  336,
      336,  336,  340,  340,  340,  340,  376,  374,  335,  336,
      373,  372,  336,  335,  346,  341,  341,  341,  341,  370,
      346,  369,  368,  336,  346,  367,  365,  364,  336,  341,
      363,  346,  347,  362,  347,  347,  347,  347,  359,  358,
      341,  357,  356,  346,  354,  347,  353,  352,  347,  345,
      346,  348,  348,  348,  348,  330,  329,  327,  349,  347,
      349,  349,  349,  349,  347,  326,  380,  380,  380,  380,
      325,  349,  323,  322,  349,  321,  320,  380,  318,  317,

      380,  381,  381,  381,  381,  349,  384,  384,  384,  384,
      349,  380,  316,  315,  312,  382,  380,  382,  382,  382,
      382,  383,  383,  383,  383,  311,  310,  309,  382,  307,
      306,  382,  305,  304,  303,  383,  385,  296,  385,  385,
      385,  385,  382,  295,  279,  278,  383,  382,  274,  385,
      273,  269,  385,  407,  407,  407,  407,  408,  408,  408,
      408,  268,  267,  385,  407,  266,  265,  407,  385,  409,
      264,  409,  409,  409,  409,  262,  261,  258,  407,  256,
      255,  254,  409,  407,  253,  409,  410,  410,  410,  410,
      411,  411,  411,  411,  252,  249,  409,  248,  247,  246,

      410,  409,  412,  245,  412,  412,  412,  412,  243,  242,
      241,  410,  240,  238,  233,  412,  221,  215,  412,  207,
      206,  205,  204,  203,  202,  200,  199,  196,  194,  412,
      192,  191,  190,  187,  412,  482,  482,  482,  482,  483,
      483,  483,  483,  484,  484,  484,  484,  485,  485,  485,
      485,  486,  486,  486,  486,  487,  487,  488,  488,  488,
      488,  489,  186,  489,  489,  490,  490,  490,  490,  491,
      491,  491,  491,  492,  492,  492,  492,  184,  183,  180,
      179,  178,  176,  175,  174,  170,  165,  161,  153,  147,
      139,  138,  133,  129,  128,  126,  120,  117,  115,  114,

      113,  112,  110,  107,  105,  103,  101,   99,   98,   97,
       94,   84,   80,   79,   78,   71,   68,   66,   65,   64,
       63,   61,   58,   54,   52,   49,   47,   42,   32,   27,
       26,   23,   19,   18,   16,   15,   14,   13,    2,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[113] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,     };

static const flex_int16_t yy_rule_linenum[112] =
    {   0,
       96,  111,  115,  138,  151,  155,  165,  182,  200,  229,
      260,  265,  270,  277,  281,  298,  311,  324,  329,  334,
      341,  368,  397,  404,  422,  425,  428,  431,  434,  437,
      440,  443,  446,  449,  452,  455,  458,  461,  464,  467,
      470,  473,  476,  479,  482,  485,  488,  491,  494,  497,
      500,  503,  506,  509,  512,  521,  531,  541,  551,  563,
      575,  588,  596,  610,  611,  612,  613,  614,  615,  616,
      617,  618,  619,  620,  621,  622,  623,  624,  625,  626,
      627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
      637,  638,  639,  640,  641,  642,  643,  644,  645,  646,

      647,  648,  649,  650,  651,  652,  653,  655,  660,  675,
      680
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
/*
 *  The yyscanner definition for Ion. Ion is partially compatible with Python 3.7
 *  PLR is short for: Python Language Reference
 *  PLR link: https://docs.python.org/3/reference/
 */
/***************************************************************
*  Declaration section
***************************************************************/
#line 11 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
#include <string>
#include <cstdlib>
#include <gen/ion.tab.h>
#include <include/ion_def.h>
#include <modules/lexer/ion_lex_func.h>

#define buffer_ptr              ((yyextra)->buffer_ptr)
#define indent_stack            ((yyextra)->indent_stack)
#define string_quote            ((yyextra)->string_quote)
#define string_buf              ((yyextra)->string_buf)
#define flag_string_prefix      ((yyextra)->flag_string_prefix)

#define bytes_quote             ((yyextra)->bytes_quote)
#define bytes_buf               ((yyextra)->bytes_buf)
#define flag_bytes_prefix       ((yyextra)->flag_bytes_prefix)
#define flag_ex_join_line       ((yyextra)->flag_ex_join_line)
#define err_msg                 ((yyextra)->err_msg)
#define last_token              ((yyextra)->last_token)
#define send_end                ((yyextra)->send_end)
#define yylval                  (*((yyextra)->token))
#define YY_INPUT(buf, result, max_size) \
{\
    auto input_buf = (yyextra)->input.rdbuf();\
    if((max_size) > 0 && input_buf->sgetc() != EOF) {\
        (result) = 1;\
        (buf)[0] = input_buf->sbumpc();\
        (yyextra)->minor_offset++;\
        if((buf)[0] == '\n') {\
            (yyextra)->major_offset += (yyextra)->minor_offset;\
            (yyextra)->minor_offset = 0;\
        }\
        else if((buf)[0] == '\t')\
            (buf)[0] = ' ';\
        if((yyextra)->minor_offset == 1) {\
            (buf)[1] = (buf)[0];\
            (buf)[0] = ' ';\
            (result) = 2;\
        }\
    }\
    else if (input_buf->sgetc() == EOF && !((yyextra)->is_ended)) {\
        (buf)[0] = '\n';\
        (buf)[1] = ' ';\
        (buf)[2] = '\n';\
        (result) = 3;\
        (yyextra)->is_ended = true;\
    }\
    else\
        (result) = 0;\
}\


using TokenType=yy::parser::token::yytokentype;
extern int verbose_flag;
#line 1018 "/home/Administrator/iffi/Projects/Ion/gen/ion.lex.cc"
/* Condition(state) definitions */

/* Miscellaneous */
#define YY_NO_INPUT 1
/* disable yywrap and there would be no need to link */
/***************************************************************
*  Rule Definition Section
***************************************************************/
#line 1027 "/home/Administrator/iffi/Projects/Ion/gen/ion.lex.cc"

#define INITIAL 0
#define COMMENTS_INLINE 1
#define SHORT_STRING 2
#define LONG_STRING 3
#define SHORT_BYTES 4
#define LONG_BYTES 5
#define BRACKET 6
#define DEDENTATION 7
#define CONTINUE 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#define YY_EXTRA_TYPE LexerState*

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 89 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"

#line 91 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
 /* ================
  * Indent and Dedent analyzer
  * ================
  */

#line 1375 "/home/Administrator/iffi/Projects/Ion/gen/ion.lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1040 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 112 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 112 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 113 )
				;
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 96 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    int indent_top = indent_stack.top();
    if (indent_top < yyleng) {
        indent_stack.push(yyleng);
        return TokenType::INDENT;
    }
    else if (indent_top == yyleng) {
        // pass
    }
    else if (indent_top > yyleng) {
        yyless(0);
        yy_push_state(DEDENTATION, yyscanner);
    }
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 111 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    yy_pop_state(yyscanner);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 115 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    indent_stack.pop();
    int new_indent_top = indent_stack.top();
    if (new_indent_top == yyleng) {
        yy_pop_state(yyscanner);
        return TokenType::DEDENT;
    }
    else if (new_indent_top < yyleng) {
        err_msg = "Unaligned dedent";
        yy_pop_state(yyscanner);
        return ERROR;
    }
    else {
        yyless(0);
        return TokenType::DEDENT;
    }
}
	YY_BREAK
/* ================
  * Inline Comments
  * ================
  * @brief Inline comments begin with '#' and should not cross several lines
  */
case 4:
YY_RULE_SETUP
#line 138 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (!flag_ex_join_line) {
        // Inline comment begins
        yy_push_state(COMMENTS_INLINE, yyscanner);
    }
    else {
        // See PLR 2.1.5
        err_msg = "Inline comment after line joining";
        BEGIN INITIAL;
        return ERROR;
    }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 151 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // Comment content is ignored
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 155 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // Inline comment ends
    yy_pop_state(yyscanner);
}
	YY_BREAK
/* ================
  * String
  * ================
  */
case 7:
YY_RULE_SETUP
#line 165 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    yy_push_state(SHORT_STRING, yyscanner);
    string_quote = yytext[yyleng-1];

    // parse prefixes
    flag_string_prefix = 0;
    for(size_t i=0; i<yyleng-1; i++) {
        if (yytext[i] == 'r' || yytext[i] == 'R') {
            flag_string_prefix |= STRING_RAW;
        }
        else {
            err_msg = "String prefixes apart from r/R are not supported";
            return ERROR;
        }
    }
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 182 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    yy_push_state(LONG_STRING, yyscanner);
    string_quote = yytext[yyleng-1];

    // parse prefixes
    flag_string_prefix = 0;
    for(size_t i=0; i<yyleng-3; i++) {
        if (yytext[i] == 'r' || yytext[i] == 'R') {
            flag_string_prefix |= STRING_RAW;
        }
        else {
            err_msg = "String prefixes apart from r/R are not supported";
            return ERROR;
        }
    }
}
	YY_BREAK
/* string ends, we need to deal with some escape characters */
case 9:
YY_RULE_SETUP
#line 200 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (string_quote == yytext[0]) {
        // now "input" only contains the content between quotes
        std::string output;
        if (flag_string_prefix & STRING_RAW)
            output = string_buf;
        else {
            try {
                output = processEscapes(string_buf);
            } catch(std::runtime_error &error) {
                err_msg = error.what();
                yy_pop_state(yyscanner);
                return ERROR;
            }
        }

        yy_pop_state(yyscanner);
        // TODO: deal with different encondings
        yylval.str_val = new char[output.length() + 1];
        strncpy(yylval.str_val, output.c_str(), output.length());
        buffer_ptr.push_back(yylval.str_val);
        string_buf.clear();
        return TokenType::STRING;
    }
    else {
        string_buf += yytext;
    }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 229 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (string_quote == yytext[0]) {
        // now "input" only contains the content between quotes
        std::string output;
        if (flag_string_prefix & STRING_RAW)
            output = string_buf;
        else {
            try {
                output = processEscapes(string_buf);
            } catch(std::runtime_error &error) {
                err_msg = error.what();
                yy_pop_state(yyscanner);
                return ERROR;
            }
        }

        yy_pop_state(yyscanner);
        // TODO: deal with different encondings
        yylval.str_val = new char[output.length() + 1];

        strncpy(yylval.str_val, output.c_str(), output.length());
        buffer_ptr.push_back(yylval.str_val);
        string_buf.clear();
        return TokenType::STRING;
    }
    else {
        string_buf += yytext;
    }
}
	YY_BREAK
/* normal escape characters, not \n */
case 11:
YY_RULE_SETUP
#line 260 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    string_buf += yytext;
}
	YY_BREAK
/* seen a '\\' at the end of a line, the string continues */
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 265 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // pass
}
	YY_BREAK
/* meet a '\n' in the middle of a string without a '\\', error */
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 270 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    err_msg = "EOL while scanning string literal";
    yy_pop_state(yyscanner);
    return ERROR;
}
	YY_BREAK
/* Short string doesn't contain '\\' '\n' or the quote*/
case 14:
YY_RULE_SETUP
#line 277 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    string_buf += yytext;
}
	YY_BREAK
/* Long string doesn't contain '\\' */
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 281 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    string_buf += yytext;
}
	YY_BREAK
/* meet EOF in the middle of a string, error */
case YY_STATE_EOF(SHORT_STRING):
case YY_STATE_EOF(LONG_STRING):
#line 286 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    err_msg = "EOF while scanning string literal";
    yy_pop_state(yyscanner);
    yyrestart(yyin, yyscanner);
    return ERROR;
}
	YY_BREAK
/* ================
  * Bytes
  * ================
  */
case 16:
YY_RULE_SETUP
#line 298 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    yy_push_state(SHORT_BYTES, yyscanner);
    bytes_quote = yytext[yyleng-1];

    // parse prefixes
    flag_bytes_prefix = 0;
    for(size_t i=0; i<yyleng-1; i++) {
        if (yytext[i] == 'r' || yytext[i] == 'R')
            flag_bytes_prefix |= BYTES_RAW;
    }

}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 311 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    yy_push_state(LONG_BYTES, yyscanner);
    bytes_quote = yytext[yyleng-1];

    // parse prefixes
    for(size_t i=0; i<yyleng-1; i++) {
        if (yytext[i] == 'r' || yytext[i] == 'R')
            flag_bytes_prefix |= BYTES_RAW;
    }

}
	YY_BREAK
/* normal escape characters, not \n */
case 18:
YY_RULE_SETUP
#line 324 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    bytes_buf += yytext;
}
	YY_BREAK
/* seen a '\\' at the end of a line, the bytes continues */
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 329 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    bytes_buf += yytext;
}
	YY_BREAK
/* meet a '\n' in the middle of a bytes without a '\\', error */
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 334 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    err_msg = "EOL while scanning bytes literal";
    yy_pop_state(yyscanner);
    return ERROR;
}
	YY_BREAK
/* bytes ends, we need to deal with some escape characters */
case 21:
YY_RULE_SETUP
#line 341 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (bytes_quote == yytext[0]) {
        std::string output;
        if (flag_bytes_prefix & STRING_RAW)
            output = bytes_buf;
        else {
            try {
                output = processEscapes(bytes_buf);
            } catch(std::runtime_error &error) {
                err_msg = error.what();
                yy_pop_state(yyscanner);
                return ERROR;
            }
        }
        yy_pop_state(yyscanner);
        // TODO: deal with different encondings
        yylval.str_val = new char[output.length()];
        memcpy(yylval.bytes_val, output.c_str(), output.length());
        buffer_ptr.push_back(yylval.bytes_val);
        bytes_buf.clear();
        return TokenType::STRING;
    }
    else {
        bytes_buf += yytext;
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 368 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (bytes_quote == yytext[0]) {
        std::string output;
        if (flag_bytes_prefix & STRING_RAW)
            output = bytes_buf;
        else {
            try {
                output = processEscapes(bytes_buf);
            } catch(std::runtime_error &error) {
                err_msg = error.what();
                yy_pop_state(yyscanner);
                return ERROR;
            }
        }

        yy_pop_state(yyscanner);
        // TODO: deal with different encondings
        yylval.str_val = new char[output.length()];
        memcpy(yylval.bytes_val, output.c_str(), output.length());
        buffer_ptr.push_back(yylval.bytes_val);
        bytes_buf.clear();
        return TokenType::STRING;
    }
    else {
        bytes_buf += yytext;
    }
}
	YY_BREAK
/* Short bytes doesn't contain '\\' '\n' or the quote*/
case 23:
YY_RULE_SETUP
#line 397 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (yytext[0] == bytes_quote)
        yy_pop_state(yyscanner);
    else
        bytes_buf += yytext;
}
	YY_BREAK
/* Long bytes doesn't contain '\\' */
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 404 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    bytes_buf += yytext;
}
	YY_BREAK
/* meet EOF in the middle of a bytes, error */
case YY_STATE_EOF(SHORT_BYTES):
case YY_STATE_EOF(LONG_BYTES):
#line 409 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    err_msg = "EOF while scanning bytes literal";
    yy_pop_state(yyscanner);
    yyrestart(yyin, yyscanner);
    return ERROR;
}
	YY_BREAK
/* ================
  * Keywords
  * ================
  */
/* False */
case 25:
YY_RULE_SETUP
#line 422 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_FALSE; }
	YY_BREAK
/* True */
case 26:
YY_RULE_SETUP
#line 425 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_TRUE; }
	YY_BREAK
/* None */
case 27:
YY_RULE_SETUP
#line 428 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_NONE; }
	YY_BREAK
/* and */
case 28:
YY_RULE_SETUP
#line 431 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_AND; }
	YY_BREAK
/* as */
case 29:
YY_RULE_SETUP
#line 434 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_AS; }
	YY_BREAK
/* assert */
case 30:
YY_RULE_SETUP
#line 437 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_ASSERT; }
	YY_BREAK
/* break */
case 31:
YY_RULE_SETUP
#line 440 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_BREAK; }
	YY_BREAK
/* class */
case 32:
YY_RULE_SETUP
#line 443 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_CLASS; }
	YY_BREAK
/* continue */
case 33:
YY_RULE_SETUP
#line 446 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_CONTINUE; }
	YY_BREAK
/* def */
case 34:
YY_RULE_SETUP
#line 449 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_DEF; }
	YY_BREAK
/* del */
case 35:
YY_RULE_SETUP
#line 452 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_DEL; }
	YY_BREAK
/* elif */
case 36:
YY_RULE_SETUP
#line 455 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_ELIF; }
	YY_BREAK
/* else */
case 37:
YY_RULE_SETUP
#line 458 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_ELSE; }
	YY_BREAK
/* except */
case 38:
YY_RULE_SETUP
#line 461 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_EXCEPT; }
	YY_BREAK
/* finally */
case 39:
YY_RULE_SETUP
#line 464 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_FINALLY; }
	YY_BREAK
/* for */
case 40:
YY_RULE_SETUP
#line 467 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_FOR; }
	YY_BREAK
/* from */
case 41:
YY_RULE_SETUP
#line 470 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_FROM; }
	YY_BREAK
/* global */
case 42:
YY_RULE_SETUP
#line 473 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_GLOBAL; }
	YY_BREAK
/* if */
case 43:
YY_RULE_SETUP
#line 476 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_IF; }
	YY_BREAK
/* import */
case 44:
YY_RULE_SETUP
#line 479 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_IMPORT; }
	YY_BREAK
/* in */
case 45:
YY_RULE_SETUP
#line 482 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_IN; }
	YY_BREAK
/* is */
case 46:
YY_RULE_SETUP
#line 485 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_IS; }
	YY_BREAK
/* lambda */
case 47:
YY_RULE_SETUP
#line 488 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_LAMBDA; }
	YY_BREAK
/* not */
case 48:
YY_RULE_SETUP
#line 491 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_NOT; }
	YY_BREAK
/* or */
case 49:
YY_RULE_SETUP
#line 494 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_OR; }
	YY_BREAK
/* pass */
case 50:
YY_RULE_SETUP
#line 497 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_PASS; }
	YY_BREAK
/* raise */
case 51:
YY_RULE_SETUP
#line 500 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_RAISE; }
	YY_BREAK
/* return TokenType::*/
case 52:
YY_RULE_SETUP
#line 503 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_RETURN; }
	YY_BREAK
/* try */
case 53:
YY_RULE_SETUP
#line 506 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_TRY; }
	YY_BREAK
/* while */
case 54:
YY_RULE_SETUP
#line 509 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_WHILE; }
	YY_BREAK
/* with */
case 55:
YY_RULE_SETUP
#line 512 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::KW_WITH; }
	YY_BREAK
/* ================
  * Numeric literals
  * ================
  * @brief See PLR 2.4
  */
/* decimal integer */
case 56:
YY_RULE_SETUP
#line 521 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // remove underscores from text
    removeUnderscore(yytext, yyleng);

    // convert text to decimal integer
    yylval.int_val = strtoll(yytext, nullptr, 10);
    return TokenType::NUM_INT;
}
	YY_BREAK
/* binary integer */
case 57:
YY_RULE_SETUP
#line 531 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // remove underscores from text
    removeUnderscore(yytext, yyleng);

    // convert text to decimal integer
    yylval.int_val = strtoll(yytext + 2, nullptr, 2);
    return TokenType::NUM_INT;
}
	YY_BREAK
/* octal integer */
case 58:
YY_RULE_SETUP
#line 541 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // remove underscores from text
    removeUnderscore(yytext, yyleng);

    // convert text to decimal integer
    yylval.int_val = strtoll(yytext + 2, nullptr, 8);
    return TokenType::NUM_INT;
}
	YY_BREAK
/* hexadecimal integer */
case 59:
YY_RULE_SETUP
#line 551 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // remove underscores from text
    removeUnderscore(yytext, yyleng);

    // convert text to decimal integer
    yylval.int_val = strtoll(yytext + 2, nullptr, 16);
    return TokenType::NUM_INT;
}
	YY_BREAK
/* float */
/* eg: 3.14,  10.,  .001,  1e100,  3.14e-10,  0e0,  3.14_15_93 */
case 60:
YY_RULE_SETUP
#line 563 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // remove underscores from text
    removeUnderscore(yytext, yyleng);

    // convert text to decimal integer
    yylval.float_val = strtod(yytext, nullptr);
    return TokenType::NUM_FLOAT;
}
	YY_BREAK
/* Imaginary */
/* eg: 3.14j,  10.J,  .001J,  1e100j,  3.14e-10J,  0e0j,  3.14_15_93J */
case 61:
YY_RULE_SETUP
#line 575 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // remove underscores from text
    size_t real_len = removeUnderscore(yytext, yyleng);

    // set last character j/J to zero
    yytext[real_len-1] = 0;

    // convert text to decimal integer
    yylval.imag_val = strtod(yytext, nullptr);
    return TokenType::NUM_IMAG;
}
	YY_BREAK
/* White Space */
case 62:
YY_RULE_SETUP
#line 588 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ }
	YY_BREAK
/* ================
  * Identifiers
  * ================
  * @brief See PLR 2.3
  */
case 63:
YY_RULE_SETUP
#line 596 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    yylval.id_val = new char[yyleng + 1];
    memcpy(yylval.id_val, yytext, yyleng);
    yylval.id_val[yyleng] = '\0';
    buffer_ptr.push_back(yylval.id_val);
    return TokenType::IDENTIFIER;
}
	YY_BREAK
/* ================
  * Operators and delimiters
  * ================
  * @brief See PLR 2.5 and 2.6
  */
case 64:
YY_RULE_SETUP
#line 610 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ yy_push_state(BRACKET, yyscanner); return TokenType::DLM_LPTS; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 611 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ yy_pop_state(yyscanner); return TokenType::DLM_RPTS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 612 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ yy_push_state(BRACKET, yyscanner); return TokenType::DLM_LBKT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 613 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ yy_pop_state(yyscanner); return TokenType::DLM_RBKT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 614 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ yy_push_state(BRACKET, yyscanner); return TokenType::DLM_LBC;  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 615 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ yy_pop_state(yyscanner); return TokenType::DLM_RBC;  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 616 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_CMM;  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 617 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_CLN;  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 618 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_DOT;  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 619 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_SCLN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 620 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_EQL;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 621 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_RARW; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 622 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_PLUSE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 623 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_MINSE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 624 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_MULE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 625 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_DIVE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 626 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_FDVE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 627 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_MODE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 628 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_ANDE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 629 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_ORE;  }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 630 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_XORE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 631 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_LSTE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 632 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_RSTE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 633 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_EXPE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 634 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_PLUS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 635 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_MINS; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 636 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_DAST; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 637 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_AST;   }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 638 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_FDIV;  }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 639 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_DIV;   }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 640 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_MOD;   }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 641 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_LSFT;  }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 642 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_RSFT;  }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 643 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_AND;   }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 644 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_OR;    }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 645 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_XOR;   }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 646 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_FLP;   }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 647 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_NEQ;   }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 648 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_LSE;   }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 649 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_LSS;   }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 650 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_GTE;   }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 651 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_GTT;   }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 652 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_EQT;   }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 653 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{ return TokenType::DLM_NEQ;   }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 655 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    // pass
    yy_push_state(CONTINUE, yyscanner);
}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 660 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    if (last_token != TokenType::NEWLINE)
        return TokenType::NEWLINE;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 665 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    send_end = true;
    return TokenType::ENDMARKER;
}
	YY_BREAK
/* ================
  * Error
  * ================
  */
case 110:
YY_RULE_SETUP
#line 675 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{
    err_msg = "Invalid character";
    return ERROR;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 680 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
{  // prohibit flex to print "\n" when default rule is used }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 681 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"
ECHO;
	YY_BREAK
#line 2446 "/home/Administrator/iffi/Projects/Ion/gen/ion.lex.cc"
case YY_STATE_EOF(COMMENTS_INLINE):
case YY_STATE_EOF(BRACKET):
case YY_STATE_EOF(DEDENTATION):
case YY_STATE_EOF(CONTINUE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 481);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

/* %if-c-only */
    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
    static void yy_pop_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

/* %if-c-only */
    static int yy_top_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack_ptr > 0 ? yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1] : YY_START;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
/* %endif */

/* %ok-for-header */

#line 681 "/home/Administrator/iffi/Projects/Ion/grammar/ion.flex"


